<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CaptureSnippets</name>
    </assembly>
    <members>
        <member name="T:CaptureSnippets.CachedSnippetExtractor">
            <summary>
            Provides a higher level abstraction over snippets parsing
            </summary>
        </member>
        <member name="M:CaptureSnippets.CachedSnippetExtractor.#ctor(CaptureSnippets.ExtractMetaData,CaptureSnippets.IncludeDirectory,CaptureSnippets.IncludeFile,CaptureSnippets.ConvertPackageGroupToList)">
            <summary>
            Constructor.
            </summary>
            <param name="extractMetaData">The convention that is passed to <see cref="T:CaptureSnippets.DirectorySnippetExtractor"/>.</param>
            <param name="includeDirectory">Directories to include.</param>
            <param name="includeFile">Files to include.</param>
        </member>
        <member name="M:CaptureSnippets.CachedSnippetExtractor.TryRemoveDirectory(System.String,CaptureSnippets.CachedSnippets@)">
            <summary>
            Attempts to remove and return the the cached value for <paramref name="directory"/> from the underlying <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/> using <see cref="M:System.Collections.Concurrent.ConcurrentDictionary`2.TryRemove(`0,`1@)"/>.
            </summary>
        </member>
        <member name="M:CaptureSnippets.CachedSnippetExtractor.FromDirectory(System.String)">
            <summary>
            Extract all snippets from a given directory.
            </summary>
        </member>
        <member name="T:CaptureSnippets.PackageGroup">
            <summary>
            A hierarchy of <see cref="T:CaptureSnippets.VersionGroup"/>s grouped by Package > Version
            </summary>
        </member>
        <member name="M:CaptureSnippets.PackageGroup.#ctor(System.String,System.Collections.Generic.IReadOnlyList{CaptureSnippets.VersionGroup})">
            <summary>
            Initialise a new instance of <see cref="T:CaptureSnippets.PackageGroup"/>.
            </summary>
        </member>
        <member name="F:CaptureSnippets.PackageGroup.Package">
            <summary>
            The key that all child <see cref="T:CaptureSnippets.VersionGroup"/>s contain.
            </summary>
        </member>
        <member name="F:CaptureSnippets.PackageGroup.Versions">
            <summary>
            All the <see cref="T:CaptureSnippets.VersionGroup"/>s with a common key.
            </summary>
        </member>
        <member name="M:CaptureSnippets.PackageGroup.GetEnumerator">
            <summary>
            Enumerates over <see cref="F:CaptureSnippets.PackageGroup.Versions"/>.
            </summary>
        </member>
        <member name="T:CaptureSnippets.CachedSnippets">
            <summary>
            The information cached by <see cref="T:CaptureSnippets.CachedSnippetExtractor"/>.
            </summary>
        </member>
        <member name="M:CaptureSnippets.CachedSnippets.#ctor(System.Collections.Generic.IReadOnlyList{CaptureSnippets.SnippetGroup},System.Int64,System.Collections.Generic.IReadOnlyList{CaptureSnippets.ReadSnippet},System.Collections.Generic.IReadOnlyList{System.String})">
            <summary>
            Initialise a new instance of <see cref="T:CaptureSnippets.CachedSnippets"/>.
            </summary>
        </member>
        <member name="F:CaptureSnippets.CachedSnippets.SnippetGroups">
            <summary>
            The grouped snippets from the passed in directory.
            </summary>
        </member>
        <member name="F:CaptureSnippets.CachedSnippets.Ticks">
            <summary>
            The ticks of the last file change in the passed in directory.
            </summary>
        </member>
        <member name="F:CaptureSnippets.CachedSnippets.GroupingErrors">
            <summary>
            Errors that occurred as part of the grouping.
            </summary>
        </member>
        <member name="F:CaptureSnippets.CachedSnippets.ReadingErrors">
            <summary>
            Any errors found in the parsing of snippets.
            </summary>
        </member>
        <member name="M:CaptureSnippets.CachedSnippets.GetEnumerator">
            <summary>
            Enumerates through the <see cref="F:CaptureSnippets.CachedSnippets.SnippetGroups"/> but will first throw an exception if there are any errors in <see cref="F:CaptureSnippets.CachedSnippets.ReadingErrors"/>.
            </summary>
        </member>
        <member name="T:CaptureSnippets.InterpretErrors">
            <summary>
            Extension method to convert various error cases.
            </summary>
        </member>
        <member name="M:CaptureSnippets.InterpretErrors.ErrorsAsMarkdown(CaptureSnippets.ReadSnippets)">
            <summary>
            Converts <see cref="M:CaptureSnippets.ReadSnippets.GetSnippetsInError"/> to a markdown string.
            </summary>
        </member>
        <member name="M:CaptureSnippets.InterpretErrors.ErrorsAsMarkdown(CaptureSnippets.CachedSnippets)">
            <summary>
            Converts <see cref="F:CaptureSnippets.CachedSnippets.ReadingErrors"/> to a markdown string.
            </summary>
        </member>
        <member name="M:CaptureSnippets.InterpretErrors.ErrorsAsMarkdown(CaptureSnippets.ProcessResult)">
            <summary>
            Converts <see cref="F:CaptureSnippets.ProcessResult.MissingSnippets"/> to a markdown string.
            </summary>
        </member>
        <member name="T:CaptureSnippets.MarkdownProcessor">
            <summary>
            Merges <see cref="T:CaptureSnippets.SnippetGroup"/>s with an input file/text.
            </summary>
        </member>
        <member name="M:CaptureSnippets.MarkdownProcessor.Apply(System.Collections.Generic.IEnumerable{CaptureSnippets.SnippetGroup},System.IO.TextReader,System.IO.TextWriter,CaptureSnippets.AppendGroupToMarkdown)">
            <summary>
            Apply <paramref name="snippets"/> to <paramref name="textReader"/>.
            </summary>
        </member>
        <member name="T:CaptureSnippets.MissingSnippet">
            <summary>
            Part of <see cref="T:CaptureSnippets.ProcessResult"/>.
            </summary>
        </member>
        <member name="M:CaptureSnippets.MissingSnippet.#ctor(System.String,System.Int32)">
            <summary>
            Initialise a new instance of <see cref="T:CaptureSnippets.MissingSnippet"/>.
            </summary>
        </member>
        <member name="F:CaptureSnippets.MissingSnippet.Key">
            <summary>
            The key of the missing snippet.
            </summary>
        </member>
        <member name="F:CaptureSnippets.MissingSnippet.Line">
            <summary>
            The line number in the input text where the snippet was expected to be injected.
            </summary>
        </member>
        <member name="T:CaptureSnippets.SnippetGroups">
            <summary>
            The result of an <see cref="M:CaptureSnippets.SnippetGrouper.Group(System.Collections.Generic.IEnumerable{CaptureSnippets.ReadSnippet},CaptureSnippets.ConvertPackageGroupToList)"/> method.
            </summary>
        </member>
        <member name="M:CaptureSnippets.SnippetGroups.#ctor(System.Collections.Generic.IReadOnlyList{CaptureSnippets.SnippetGroup},System.Collections.Generic.IReadOnlyList{System.String})">
            <summary>
            Initialise a new instance of <see cref="T:CaptureSnippets.ReadSnippets"/>.
            </summary>
        </member>
        <member name="F:CaptureSnippets.SnippetGroups.Groups">
            <summary>
            The full list of snippets.
            </summary>
        </member>
        <member name="F:CaptureSnippets.SnippetGroups.Errors">
            <summary>
            Any errors found in the parsing of snippets.
            </summary>
        </member>
        <member name="M:CaptureSnippets.SnippetGroups.GetEnumerator">
            <summary>
            Enumerates through the <see cref="F:CaptureSnippets.SnippetGroups.Groups"/> but will first throw an exception if there are any errors in <see cref="F:CaptureSnippets.SnippetGroups.Errors"/>.
            </summary>
        </member>
        <member name="M:CaptureSnippets.GroupingException.#ctor(System.Collections.Generic.IReadOnlyList{System.String})">
            <summary>
            Initialise a new instance of <see cref="T:CaptureSnippets.ReadSnippetsException"/>.
            </summary>
        </member>
        <member name="T:CaptureSnippets.ReadSnippetsException">
            <summary>
            Thrown when there are <see cref="T:CaptureSnippets.ReadSnippet"/>s in error.
            </summary>
        </member>
        <member name="F:CaptureSnippets.ReadSnippetsException.ReadSnippetErrors">
            <summary>
            The list of <see cref="T:CaptureSnippets.ReadSnippet"/>s that are in error.
            </summary>
        </member>
        <member name="M:CaptureSnippets.ReadSnippetsException.#ctor(System.Collections.Generic.IReadOnlyList{CaptureSnippets.ReadSnippet})">
            <summary>
            Initialise a new instance of <see cref="T:CaptureSnippets.ReadSnippetsException"/>.
            </summary>
        </member>
        <member name="T:CaptureSnippets.MissingSnippetsException">
            <summary>
            Thrown for then <see cref="F:CaptureSnippets.MissingSnippetsException.MissingSnippets"/> exist.
            </summary>
        </member>
        <member name="F:CaptureSnippets.MissingSnippetsException.MissingSnippets">
            <summary>
            The snippets that were requested but not found.
            </summary>
        </member>
        <member name="M:CaptureSnippets.MissingSnippetsException.#ctor(System.Collections.Generic.IReadOnlyList{CaptureSnippets.MissingSnippet})">
            <summary>
            Initialise a new instance of <see cref="T:CaptureSnippets.MissingSnippetsException"/>.
            </summary>
        </member>
        <member name="T:CaptureSnippets.ReadSnippet">
            <summary>
            A sub item of <see cref="T:CaptureSnippets.ReadSnippets"/>.
            </summary>
        </member>
        <member name="M:CaptureSnippets.ReadSnippet.#ctor(NuGet.Versioning.VersionRange,System.String,System.Int32,System.String,System.String,System.String)">
            <summary>
            Initialise a new instance of <see cref="T:CaptureSnippets.ReadSnippet"/>.
            </summary>
        </member>
        <member name="M:CaptureSnippets.ReadSnippet.#ctor(System.Int32,System.Int32,System.String,System.String,System.String,System.String,NuGet.Versioning.VersionRange,System.String)">
            <summary>
            Initialise a new instance of <see cref="T:CaptureSnippets.ReadSnippet"/>.
            </summary>
        </member>
        <member name="F:CaptureSnippets.ReadSnippet.ValueHash">
            <summary>
            A hash of the <see cref="F:CaptureSnippets.ReadSnippet.Value"/>.
            </summary>
        </member>
        <member name="F:CaptureSnippets.ReadSnippet.StartLine">
            <summary>
            The line the snippets started on
            </summary>
        </member>
        <member name="F:CaptureSnippets.ReadSnippet.EndLine">
            <summary>
            The line the snippet ended on.
            </summary>
        </member>
        <member name="F:CaptureSnippets.ReadSnippet.Value">
            <summary>
            The contents of the snippet
            </summary>
        </member>
        <member name="F:CaptureSnippets.ReadSnippet.Key">
            <summary>
            The key used to identify the snippet
            </summary>
        </member>
        <member name="F:CaptureSnippets.ReadSnippet.Language">
            <summary>
            The language of the snippet, extracted from the file extension of the input file.
            </summary>
        </member>
        <member name="F:CaptureSnippets.ReadSnippet.Path">
            <summary>
            The path the snippet was read from.
            </summary>
        </member>
        <member name="F:CaptureSnippets.ReadSnippet.Version">
            <summary>
            The <see cref="T:NuGet.Versioning.VersionRange"/> that was inferred for the snippet.
            </summary>
        </member>
        <member name="F:CaptureSnippets.ReadSnippet.Package">
            <summary>
            The Package that was inferred for the snippet.
            </summary>
        </member>
        <member name="P:CaptureSnippets.ReadSnippet.FileLocation">
            <summary>
            The <see cref="F:CaptureSnippets.ReadSnippet.Path"/>, <see cref="F:CaptureSnippets.ReadSnippet.StartLine"/> and <see cref="F:CaptureSnippets.ReadSnippet.EndLine"/> concatenated.
            </summary>
        </member>
        <member name="T:CaptureSnippets.SnippetGroup">
            <summary>
            A hierarchy of <see cref="T:CaptureSnippets.SnippetSource"/>s grouped by Key > Package
            </summary>
        </member>
        <member name="M:CaptureSnippets.SnippetGroup.#ctor(System.String,System.String,System.Collections.Generic.IReadOnlyList{CaptureSnippets.PackageGroup})">
            <summary>
            Initialise a new instance of <see cref="T:CaptureSnippets.SnippetGroup"/>.
            </summary>
        </member>
        <member name="F:CaptureSnippets.SnippetGroup.Key">
            <summary>
            The key that all child <see cref="T:CaptureSnippets.SnippetGroup"/>s contain.
            </summary>
        </member>
        <member name="F:CaptureSnippets.SnippetGroup.Language">
            <summary>
            The language of the snippet, extracted from the file extension of the input file.
            </summary>
        </member>
        <member name="F:CaptureSnippets.SnippetGroup.Packages">
            <summary>
            All the <see cref="T:CaptureSnippets.PackageGroup"/>s with a common key.
            </summary>
        </member>
        <member name="M:CaptureSnippets.SnippetGroup.GetEnumerator">
            <summary>
            Enumerates over <see cref="F:CaptureSnippets.SnippetGroup.Packages"/>.
            </summary>
        </member>
        <member name="T:CaptureSnippets.VersionGroup">
            <summary>
            Allows <see cref="T:CaptureSnippets.SnippetSource"/>s to be grouped by their <see cref="T:NuGet.Versioning.VersionRange"/>.
            </summary>
        </member>
        <member name="M:CaptureSnippets.VersionGroup.#ctor(NuGet.Versioning.VersionRange,System.String,System.Collections.Generic.IReadOnlyList{CaptureSnippets.SnippetSource})">
            <summary>
            Initialise a new instance of <see cref="T:CaptureSnippets.VersionGroup"/>.
            </summary>
        </member>
        <member name="F:CaptureSnippets.VersionGroup.Version">
            <summary>
             The version that all the child <see cref="T:CaptureSnippets.SnippetSource"/>s have.
            </summary>
        </member>
        <member name="F:CaptureSnippets.VersionGroup.Value">
            <summary>
            The contents of the snippet
            </summary>
        </member>
        <member name="F:CaptureSnippets.VersionGroup.Sources">
            <summary>
            All the snippets with a common <see cref="T:NuGet.Versioning.VersionRange"/>.
            </summary>
        </member>
        <member name="M:CaptureSnippets.VersionGroup.GetEnumerator">
            <summary>
            Enumerates over <see cref="F:CaptureSnippets.VersionGroup.Sources"/>.
            </summary>
        </member>
        <member name="T:CaptureSnippets.ReadSnippets">
            <summary>
            The result of an <see cref="!:SnippetExtractor"/> From methods.
            </summary>
        </member>
        <member name="M:CaptureSnippets.ReadSnippets.#ctor(System.Collections.Generic.IReadOnlyList{CaptureSnippets.ReadSnippet})">
            <summary>
            Initialise a new instance of <see cref="T:CaptureSnippets.ReadSnippets"/>.
            </summary>
        </member>
        <member name="F:CaptureSnippets.ReadSnippets.Snippets">
            <summary>
            The full list of snippets.
            </summary>
        </member>
        <member name="M:CaptureSnippets.ReadSnippets.GetSnippetsInError">
            <summary>
            Any errors found in the parsing of snippets.
            </summary>
        </member>
        <member name="M:CaptureSnippets.ReadSnippets.GetEnumerator">
            <summary>
            Enumerates through the <see cref="F:CaptureSnippets.ReadSnippets.Snippets"/> but will first throw an exception if there are any errors in <see cref="!:Errors"/>.
            </summary>
        </member>
        <member name="T:CaptureSnippets.DirectorySnippetExtractor">
            <summary>
            Extracts <see cref="T:CaptureSnippets.ReadSnippet"/>s from a given directory.
            </summary>
        </member>
        <member name="M:CaptureSnippets.DirectorySnippetExtractor.#ctor(CaptureSnippets.ExtractMetaData,CaptureSnippets.IncludeDirectory,CaptureSnippets.IncludeFile,CaptureSnippets.TranslatePackage)">
            <summary>
            Initialise a new instance of <see cref="T:CaptureSnippets.DirectorySnippetExtractor"/>.
            </summary>
            <param name="extractMetaData">How to extract a <see cref="T:CaptureSnippets.SnippetMetaData"/> from a given path.</param>
            <param name="includeFile">Used to filter files.</param>
            <param name="translatePackage">How to translate a package alias to the full package name.</param>
            <param name="includeDirectory">Used to filter directories.</param>
        </member>
        <member name="T:CaptureSnippets.FileSnippetExtractor">
            <summary>
            Extracts <see cref="T:CaptureSnippets.ReadSnippet"/>s from a given input.
            </summary>
        </member>
        <member name="M:CaptureSnippets.FileSnippetExtractor.#ctor(CaptureSnippets.ExtractMetaData,CaptureSnippets.TranslatePackage)">
            <summary>
            Initialise a new instance of <see cref="T:CaptureSnippets.FileSnippetExtractor"/>.
            </summary>
            <param name="extractMetaData">How to extract a <see cref="T:CaptureSnippets.SnippetMetaData"/> from a given path.</param>
            <param name="translatePackage">How to translate a package alias to the full package name.</param>
        </member>
        <member name="M:CaptureSnippets.FileSnippetExtractor.AppendFromReader(System.IO.TextReader,System.String,System.String,CaptureSnippets.SnippetMetaData,System.Action{CaptureSnippets.ReadSnippet})">
            <summary>
            Read from a <see cref="T:System.IO.TextReader"/>.
            </summary>
            <param name="textReader">The <see cref="T:System.IO.TextReader"/> to read from.</param>
            <param name="path">The current path so extract <see cref="T:CaptureSnippets.ReadSnippet"/>s from.</param>
            <param name="parentMetaData">The inherited <see cref="T:CaptureSnippets.SnippetMetaData"/>.</param>
        </member>
        <member name="T:CaptureSnippets.SimpleMarkdownHandling">
            <summary>
            Simple markdown handling to be passed to <see cref="T:CaptureSnippets.MarkdownProcessor"/>.
            </summary>
        </member>
        <member name="M:CaptureSnippets.SimpleMarkdownHandling.AppendGroup(CaptureSnippets.SnippetGroup,System.IO.TextWriter)">
            <summary>
            Method that can be override to control how an individual <see cref="T:CaptureSnippets.SnippetGroup"/> is rendered.
            </summary>
        </member>
        <member name="T:CaptureSnippets.SnippetSource">
            <summary>
            A snippet after it has been grouped by <see cref="T:CaptureSnippets.SnippetGrouper"/>.
            </summary>
            <remarks>Note that <see cref="F:CaptureSnippets.ReadSnippet.Version"/> and <see cref="F:CaptureSnippets.ReadSnippet.Key"/> are not included since they can be infered by the grouping structure.</remarks>
        </member>
        <member name="M:CaptureSnippets.SnippetSource.#ctor(System.Int32,System.Int32,System.String,NuGet.Versioning.VersionRange)">
            <summary>
            Initialise a new instance of <see cref="T:CaptureSnippets.SnippetSource"/>.
            </summary>
        </member>
        <member name="F:CaptureSnippets.SnippetSource.Version">
            <summary>
            The <see cref="T:NuGet.Versioning.VersionRange"/> for the snippet.
            </summary>
        </member>
        <member name="F:CaptureSnippets.SnippetSource.StartLine">
            <summary>
            The line the snippets started on.
            </summary>
        </member>
        <member name="F:CaptureSnippets.SnippetSource.EndLine">
            <summary>
            The line the snippet ended on.
            </summary>
        </member>
        <member name="F:CaptureSnippets.SnippetSource.File">
            <summary>
            The file path the snippet was read from.
            </summary>
        </member>
        <member name="P:CaptureSnippets.SnippetSource.FileLocation">
            <summary>
            The <see cref="F:CaptureSnippets.SnippetSource.File"/>, <see cref="F:CaptureSnippets.SnippetSource.StartLine"/> and <see cref="F:CaptureSnippets.SnippetSource.EndLine"/> concatenated.
            </summary>
        </member>
        <member name="T:CaptureSnippets.ProcessResult">
            <summary>
            The result of <see cref="T:CaptureSnippets.MarkdownProcessor"/> Apply methods.
            </summary>
        </member>
        <member name="F:CaptureSnippets.ProcessResult.UsedSnippets">
            <summary>
              List of all snippets that the markdown file used. 
            </summary>
        </member>
        <member name="F:CaptureSnippets.ProcessResult.MissingSnippets">
            <summary>
              List of all snippets that the markdown file expected but did not exist in the input snippets.
            </summary>
        </member>
        <member name="M:CaptureSnippets.ProcessResult.GetEnumerator">
            <summary>
            Enumerates through the <see cref="F:CaptureSnippets.ProcessResult.UsedSnippets"/> but will first throw an exception if there are any errors in <see cref="F:CaptureSnippets.ProcessResult.MissingSnippets"/>.
            </summary>
        </member>
        <member name="T:CaptureSnippets.TranslatePackage">
            <summary>
            Used to translate a package alias to a full package name.
            </summary>
        </member>
    </members>
</doc>
